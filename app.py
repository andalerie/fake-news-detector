# 0) –ß—Ç–æ–±—ã predict.py –Ω–µ –ø–µ—á–∞—Ç–∞–ª Fail –∏ –Ω–µ –≤—ã–≤–∞–ª–∏–≤–∞–ª—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (–∫–æ—Å—Ç—ã–ª—å):
import sys
sys.argv = ["app.py", "dummy"]

import streamlit as st
from langdetect import detect, LangDetectException
from predict import text_prepare

# 1) –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äî –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∏–º–ª–∏—Ç-–∫–æ–º–∞–Ω–¥–∞
st.set_page_config(page_title="Fake News Detector", layout="centered")

# 2) –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üîç Fake News Detector")
st.write("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –Ω–∞–∂–º–∏—Ç–µ **–ü–†–ï–î–°–ö–ê–ó–ê–¢–¨**:")

# 4) –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
@st.cache_resource
def load_artifacts():
    import joblib
    model = joblib.load('models/model_fast.pkl')
    vect  = joblib.load('models/vect_fast.pkl')
    return model, vect

model, vect = load_artifacts()

# 5) –ü–æ–ª–µ –≤–≤–æ–¥–∞
user_text = st.text_area("–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:", height=200)

# 6) –ö–Ω–æ–ø–∫–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
if st.button("–ü–†–ï–î–°–ö–ê–ó–ê–¢–¨"):
    if not user_text.strip():
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
    else:
        try:
            if detect(user_text) != 'en':
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.")
                st.stop()
        except LangDetectException:
            st.error("–Ø–∑—ã–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.")
            st.stop()

        clean = text_prepare(user_text)
        vec   = vect.transform([clean])
        label = model.predict(vec)[0]
        prob  = model.predict_proba(vec)[0][label]
        st.success(f"{'‚ùå FAKE' if label else '‚úÖ REAL'}  (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {prob:.2%})")